{"version":3,"sources":["webpack:///../src/useRequest/useRequest.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useRequest","state","actions","onClick","loading","Promise","resolve","reject","setTimeout","Math","floor","random","response","then","succeeded","catch","error","failed","Object","keys","data","length","isMDXComponent"],"mappings":"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","file":"component---src-use-request-use-request-mdx-8d748e5a519d77f29607.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/thegrinder/react-handy-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useRequest } from '../';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst UseRequestDemo = makeShortcode(\"UseRequestDemo\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"userequest\"\n    }}>{`useRequest`}</h1>\n    <p>{`useRequest is a hook that is designed to handle request state. It uses `}<inlineCode parentName=\"p\">{`useReducer`}</inlineCode>{` under the hood and returns state and three actions to update it.`}</p>\n    <h2 {...{\n      \"id\": \"state\"\n    }}>{`State`}</h2>\n    <p>{`The return state has the following properties`}</p>\n    <ul>\n      <li parentName=\"ul\">{`loading`}</li>\n      <li parentName=\"ul\">{`initialLoad`}</li>\n      <li parentName=\"ul\">{`succeeded`}</li>\n      <li parentName=\"ul\">{`error`}</li>\n      <li parentName=\"ul\">{`data`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"actions\"\n    }}>{`Actions`}</h2>\n    <h3 {...{\n      \"id\": \"loading\"\n    }}>{`loading`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`succeeded`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n      <li parentName=\"ul\">{`resets `}<inlineCode parentName=\"li\">{`error`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`null`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"succeeded\"\n    }}>{`succeeded`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`succeeded`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`initialLoad`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n      <li parentName=\"ul\">{`populates `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` with the given argument`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"failed\"\n    }}>{`failed`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`initialLoad`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n      <li parentName=\"ul\">{`populates `}<inlineCode parentName=\"li\">{`error`}</inlineCode>{` with the given argument`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"fulfilled\"\n    }}>{`fulfilled`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`loading`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n      <li parentName=\"ul\">{`flips `}<inlineCode parentName=\"li\">{`initialLoad`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n\n    <Playground __position={0} __code={'() => {\\n  const UseRequestDemo = () => {\\n    const [state, actions] = useRequest()\\n    const mockRequest = () =>\\n      new Promise((resolve, reject) => {\\n        return setTimeout(() => {\\n          Math.floor(Math.random() * 2) == 0\\n            ? resolve({ response: \\'success\\' })\\n            : reject(\\'oops!\\')\\n        }, 1000)\\n      })\\n    const makeRequest = () => {\\n      actions.loading()\\n      mockRequest()\\n        .then(response => actions.succeeded(response))\\n        .catch(error => actions.failed(error))\\n    }\\n    return (\\n      <div>\\n        <button onClick={makeRequest}>make request</button>\\n        {state.loading && <div>loading...</div>}\\n        {Object.keys(state.data).length !== 0 && (\\n          <div>response: {state.data.response}</div>\\n        )}\\n        {state.error && <div>error: {state.error}</div>}\\n      </div>\\n    )\\n  }\\n  return <UseRequestDemo />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useRequest,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const UseRequestDemo = () => {\n          const [state, actions] = useRequest();\n\n          const mockRequest = () => new Promise((resolve, reject) => {\n            return setTimeout(() => {\n              Math.floor(Math.random() * 2) == 0 ? resolve({\n                response: 'success'\n              }) : reject('oops!');\n            }, 1000);\n          });\n\n          const makeRequest = () => {\n            actions.loading();\n            mockRequest().then(response => actions.succeeded(response)).catch(error => actions.failed(error));\n          };\n\n          return <div>\n          <button onClick={makeRequest}>\n            make request\n          </button>\n          {state.loading && <div>loading...</div>}\n          {Object.keys(state.data).length !== 0 && <div>\n              response: {state.data.response}\n            </div>}\n          {state.error && <div>error: {state.error}</div>}\n        </div>;\n        };\n\n        return <UseRequestDemo mdxType=\"UseRequestDemo\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}