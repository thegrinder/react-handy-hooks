{"version":3,"sources":["webpack:///../src/useForm/useForm.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","useState","useCallback","Playground","useForm","Input","error","submissionError","touched","value","onChange","onBlur","style","color","validate","values","errors","initialValues","submissionErrors","setSubmissionErrors","onSubmit","setTimeout","Math","floor","random","alert","JSON","stringify","pristine","invalid","getFieldProps","handleSubmit","fieldProps","disabled","isMDXComponent"],"mappings":"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","file":"component---src-use-form-use-form-mdx-50331d05d7e32f3fb9be.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/thegrinder/react-handy-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState, useCallback } from 'react';\nimport { Playground } from 'docz';\nimport { useForm } from '../';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Input = makeShortcode(\"Input\");\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useform\"\n    }}>{`useForm`}</h1>\n    <p>{`useForm is a simple react hook that allows you to build forms quickly.`}</p>\n    <h2 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h2>\n    <p>{`useForm accepts an object with `}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`submitting`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` properties as its only argument.`}</p>\n    <h3 {...{\n      \"id\": \"initialvalues\"\n    }}><strong parentName=\"h3\">{`initialValues`}</strong></h3>\n    <p>{`It's the only required property. It's an object consisting of field names and its corresponding values.`}</p>\n    <h3 {...{\n      \"id\": \"validate\"\n    }}><strong parentName=\"h3\">{`validate`}</strong></h3>\n    <p>{`It's a function that returns errors object where the keys are the field names and the values - the corresponding errors.`}</p>\n    <h3 {...{\n      \"id\": \"onsubmit\"\n    }}><strong parentName=\"h3\">{`onSubmit`}</strong></h3>\n    <p>{`It's a function called with form values.`}</p>\n    <h3 {...{\n      \"id\": \"submitting\"\n    }}><strong parentName=\"h3\">{`submitting`}</strong></h3>\n    <p>{`It's a boolean passed down to getFieldProps and returned from the hook to facilitate usage with context. It's set to false by default`}</p>\n    <h3 {...{\n      \"id\": \"submissionerrors\"\n    }}><strong parentName=\"h3\">{`submissionErrors`}</strong></h3>\n    <p>{`It's an object of errors that you can feed into the hook to handle showing submission errors.`}</p>\n    <h2 {...{\n      \"id\": \"returned-object\"\n    }}>{`Returned object`}</h2>\n    <p>{`useForm returns an object with the following properties, `}<inlineCode parentName=\"p\">{`getFieldProps`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`invalid`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`pristine`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`handleSubmit`}</inlineCode>{`and `}<inlineCode parentName=\"p\">{`resetForm`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"getfieldprops\"\n    }}><strong parentName=\"h3\">{`getFieldProps`}</strong></h3>\n    <p>{`It's a function that takes in a field's name, and returns all the handlers and flags needed to to create a form field.\nHere is the list of returned handlers/flags:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`error`}</li>\n      <li parentName=\"ul\">{`submissionError`}</li>\n      <li parentName=\"ul\">{`touched`}</li>\n      <li parentName=\"ul\">{`submitting`}</li>\n      <li parentName=\"ul\">{`value`}</li>\n      <li parentName=\"ul\">{`onChange`}</li>\n      <li parentName=\"ul\">{`onBlur`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}><strong parentName=\"h3\">{`invalid`}</strong></h3>\n    <p>{`It's a boolean that signals whether the form is invalid.`}</p>\n    <h3 {...{\n      \"id\": \"pristine\"\n    }}><strong parentName=\"h3\">{`pristine`}</strong></h3>\n    <p>{`It's a boolean that signals whether the form values are equal to its initial values.`}</p>\n    <h3 {...{\n      \"id\": \"submitting-1\"\n    }}><strong parentName=\"h3\">{`submitting`}</strong></h3>\n    <p>{`It's a boolean with the same value as the submitting property of the hook argument. Just a convenience flag.`}</p>\n    <h3 {...{\n      \"id\": \"handlesubmit\"\n    }}><strong parentName=\"h3\">{`handleSubmit`}</strong></h3>\n    <p>{`It's a wrapper function around the given onSubmit that normally should be applied to form's onSubmit.`}</p>\n    <h3 {...{\n      \"id\": \"resetform\"\n    }}><strong parentName=\"h3\">{`resetForm`}</strong></h3>\n    <p>{`It's a function that resets the form to its initialState;.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n\n    <Playground __position={0} __code={'() => {\\n  const Input = ({\\n    error,\\n    submissionError,\\n    touched,\\n    value,\\n    onChange,\\n    onBlur,\\n  }) => (\\n    <div>\\n      <input onChange={onChange} onBlur={onBlur} value={value} />\\n      <div>\\n        {touched && error && <span style={{ color: \\'red\\' }}>{error}</span>}\\n        {submissionError && (\\n          <span style={{ color: \\'red\\' }}>{submissionError}</span>\\n        )}\\n      </div>\\n    </div>\\n  )\\n  const validate = values => {\\n    let errors = {}\\n    if (values.name === \\'\\') {\\n      errors.name = \\'required\\'\\n    }\\n    return errors\\n  }\\n  const initialValues = {\\n    name: \\'\\',\\n  }\\n  const Example = () => {\\n    const [submissionErrors, setSubmissionErrors] = useState()\\n    const onSubmit = useCallback(values => {\\n      setTimeout(() => {\\n        if (Math.floor(Math.random() * 2) == 0) {\\n          alert(JSON.stringify(values))\\n        } else {\\n          setSubmissionErrors({ name: \\'already exists\\' })\\n        }\\n      }, 1000)\\n    }, [])\\n    const { pristine, invalid, getFieldProps, handleSubmit } = useForm({\\n      initialValues,\\n      validate,\\n      onSubmit,\\n      submissionErrors,\\n    })\\n    const fieldProps = getFieldProps(\\'name\\')\\n    return (\\n      <form onSubmit={handleSubmit}>\\n        <Input {...fieldProps} />\\n        <div>\\n          <button disabled={pristine || invalid}>submit</button>\\n        </div>\\n      </form>\\n    )\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      useCallback,\n      Playground,\n      useForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const Input = ({\n          error,\n          submissionError,\n          touched,\n          value,\n          onChange,\n          onBlur\n        }) => <div>\n        <input onChange={onChange} onBlur={onBlur} value={value} />\n        <div>\n          {touched && error && <span style={{\n              color: 'red'\n            }}>\n              {error}\n            </span>}\n          {submissionError && <span style={{\n              color: 'red'\n            }}>\n              {submissionError}\n            </span>}\n        </div>\n      </div>;\n\n        const validate = values => {\n          let errors = {};\n\n          if (values.name === '') {\n            errors.name = 'required';\n          }\n\n          return errors;\n        };\n\n        const initialValues = {\n          name: ''\n        };\n\n        const Example = () => {\n          const [submissionErrors, setSubmissionErrors] = useState();\n          const onSubmit = useCallback(values => {\n            setTimeout(() => {\n              if (Math.floor(Math.random() * 2) == 0) {\n                alert(JSON.stringify(values));\n              } else {\n                setSubmissionErrors({\n                  name: 'already exists'\n                });\n              }\n            }, 1000);\n          }, []);\n          const {\n            pristine,\n            invalid,\n            getFieldProps,\n            handleSubmit\n          } = useForm({\n            initialValues,\n            validate,\n            onSubmit,\n            submissionErrors\n          });\n          const fieldProps = getFieldProps('name');\n          return <form onSubmit={handleSubmit}>\n          <Input {...fieldProps} mdxType=\"Input\" />\n          <div>\n            <button disabled={pristine || invalid}>submit</button>\n          </div>\n        </form>;\n        };\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}