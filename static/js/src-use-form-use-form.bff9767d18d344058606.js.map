{"version":3,"sources":["webpack:///./src/useForm/useForm.js","webpack:///./src/useForm/useForm.mdx"],"names":["useForm","_ref","initialValues","validate","onSubmit","_useState2","_slicedToArray","useState","values","updateValues","_useState4","errors","updateErrors","_useState6","touched","updateTouched","runValidation","formValues","useEffect","invalid","Object","keys","length","pristine","equal","getFieldProps","name","error","value","onChange","e","newValues","_objectSpread","_defineProperty","target","onBlur","handleSubmit","preventDefault","resetForm","MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react_default","a","createElement","dist","id","index_m","__position","__code","__scope","Input","style","color","alert","JSON","stringify","_useForm","_getFieldProps","disabled"],"mappings":"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","file":"static/js/src-use-form-use-form.c370ff8a.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport equal from 'fast-deep-equal';\n\nconst useForm = ({ initialValues, validate, onSubmit }) => {\n  const [values, updateValues] = useState(initialValues);\n  const [errors, updateErrors] = useState({});\n  const [touched, updateTouched] = useState({});\n\n  const runValidation = (formValues) => {\n    if (validate) {\n      updateErrors(validate(formValues));\n    }\n  };\n\n  useEffect(() => {\n    runValidation(values);\n  }, []);\n\n  const invalid = !!Object.keys(errors).length;\n\n  const pristine = equal(initialValues, values);\n\n  const getFieldProps = name => ({\n    error: errors[name],\n    touched: !!touched[name],\n    value: values[name],\n    onChange(e) {\n      const newValues = { ...values, [name]: e.target.value };\n      updateValues(newValues);\n      runValidation(newValues);\n    },\n    onBlur() {\n      updateTouched({ ...touched, [name]: true });\n    },\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!invalid && onSubmit) {\n      onSubmit(values);\n    }\n  }\n\n  const resetForm = () => {\n    updateValues(initialValues);\n    updateErrors({});\n    updateTouched({});\n  };\n\n  return {\n    getFieldProps,\n    invalid,\n    pristine,\n    handleSubmit,\n    resetForm,\n  };\n};\n\nexport default useForm;\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground } from 'docz';\nimport { useForm } from '../';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"useform\"}}>{`useForm`}</MDXTag>\n\n<Playground __position={0} __code={'() => {\\n  const Input = ({ error, touched, value, onChange, onBlur }) => (\\n    <div>\\n      <input onChange={onChange} onBlur={onBlur} value={value} />\\n      <div>\\n        {touched && error && <span style={{ color: \\'red\\' }}>{error}</span>}\\n      </div>\\n    </div>\\n  )\\n  const validate = values => {\\n    let errors = {}\\n    if (values.name === \\'\\') {\\n      errors.name = \\'required\\'\\n    }\\n    return errors\\n  }\\n\\n  const initialValues = {\\n    name: \\'\\',\\n  }\\n\\n  const onSubmit = values => {\\n    alert(JSON.stringify(values))\\n  }\\n\\n  const Example = () => {\\n    const { pristine, invalid, getFieldProps, handleSubmit } = useForm({\\n      initialValues,\\n      validate,\\n      onSubmit,\\n    })\\n    const { error, touched, value, onChange, onBlur } = getFieldProps(\\'name\\')\\n    return (\\n      <form onSubmit={handleSubmit}>\\n        <Input\\n          error={error}\\n          touched={touched}\\n          value={value}\\n          onChange={onChange}\\n          onBlur={onBlur}\\n        />\\n        <div>\\n          <button disabled={pristine || invalid}>submit</button>\\n        </div>\\n      </form>\\n    )\\n  }\\n\\n  return <Example />\\n}'} __scope={{props: this ? this.props : props,useForm}}>\n  {() => {\n    const Input = ({ error, touched, value, onChange, onBlur }) => (\n      <div>\n        <input \n          onChange={onChange} \n          onBlur={onBlur} \n          value={value}\n        />\n        <div>\n          {touched && error && <span style={{ color: 'red' }}>{error}</span>}\n        </div>\n      </div>\n    );\nconst validate = (values) => {\n  let errors = {};\n  if (values.name === '') {\n    errors.name = 'required';\n  }\n  return errors;\n};\n\nconst initialValues = {\n  name: '',\n};\n\nconst onSubmit = values => {\n  alert(JSON.stringify(values));\n};\n\nconst Example = () => {\n  const { pristine, invalid, getFieldProps, handleSubmit } = useForm({\n    initialValues,\n    validate,\n    onSubmit,\n  });\n  const { error, touched, value, onChange, onBlur } = getFieldProps('name');\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input \n        error={error} \n        touched={touched} \n        value={value} \n        onChange={onChange} \n        onBlur={onBlur} \n      />\n      <div>\n        <button disabled={pristine || invalid}>submit</button>\n      </div>\n    </form>\n  );\n};\n\nreturn <Example />\n  }}\n</Playground>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}