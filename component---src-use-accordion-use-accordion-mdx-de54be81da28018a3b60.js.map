{"version":3,"sources":["webpack:///../src/useAccordion/useAccordion.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","useAccordion","AccordionHeader","React","ref","style","fontSize","isOpen","AccordionSection","children","getHeaderProps","getSectionProps","isActiveSection","aria-label","id","section","map","index","key","isMDXComponent"],"mappings":"4gBAQO,IAAMA,EAAe,Q,mNAE5B,IAAMC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAMZG,GAHkBL,EAAc,mBACbA,EAAc,oBACvBA,EAAc,WACV,CAClBD,iBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,oFAAmE,0BAAYC,WAAW,KAAvB,kBAAnE,QAAsI,0BAAYA,WAAW,KAAvB,mBAAtI,YAA8M,0BAAYA,WAAW,KAAvB,mBAA9M,4GAEA,iBAAQ,CACN,GAAM,kBACL,sBAAQA,WAAW,MAAnB,mBACH,uLAEA,sBACE,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,MACA,kBAAIA,WAAW,MAAf,OACA,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,aACA,kBAAIA,WAAW,MAAf,QAEF,iIAAgH,0BAAYA,WAAW,KAAvB,oBAAhH,MACA,iBAAQ,CACN,GAAM,mBACL,sBAAQA,WAAW,MAAnB,oBACH,uLAEA,sBACE,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,MACA,kBAAIA,WAAW,MAAf,OACA,kBAAIA,WAAW,MAAf,QACA,kBAAIA,WAAW,MAAf,SACA,kBAAIA,WAAW,MAAf,QAEF,iIAAgH,0BAAYA,WAAW,KAAvB,oBAAhH,MACA,iBAAQ,CACN,GAAM,mBACL,sBAAQA,WAAW,MAAnB,oBACH,uKAEA,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kmCAAinCC,SAAO,GACzpCZ,QACAK,kBACAQ,eACAC,kBAJypC,gBAKzpCT,IALypC,EAMzpCR,eANypC,GAOxpCW,QAAQ,eACZ,WACK,IAAMO,EAAkBC,cAAiB,SAAChB,EAAOiB,GAAR,OAAgB,0BAAYjB,EAAZ,CAAmBkB,MAAO,CACjFC,SAAU,UAEXnB,EAAMoB,OAAS,QAAU,WAEpBC,EAAmBL,cAAiB,SAAChB,EAAOiB,GAAR,OAAgB,kBAASjB,EACnE,mBAAKiB,IAAKA,GAAMjB,EAAMsB,cA6BtB,OAAO,aA1BS,WAAM,MAKhBR,cAHFS,EAFkB,EAElBA,eACAC,EAHkB,EAGlBA,gBACAC,EAJkB,EAIlBA,gBASF,OAAO,mBAAKC,aAAW,qBAPT,CAAC,CACbC,GAAI,MACJC,QAAS,eACR,CACDD,GAAI,MACJC,QAAS,gBAGJC,KAAI,WAGNC,GAHM,IACPH,EADO,EACPA,GACAC,EAFO,EAEPA,QAFO,OAGI,mBAAKG,IAAKJ,GACrB,YAACZ,EAAD,GAAiBK,OAAQK,EAAgBK,IAAYP,EAAeI,EAAIG,GAAxE,CAAgFtB,QAAQ,qBACxF,YAACa,EAAD,KAAsBG,EAAgBG,EAAIG,GAA1C,CAAkDtB,QAAQ,qBACvDoB,UAMF,CAASpB,QAAQ,qB,iNAOhCF,EAAW0B,gBAAiB","file":"component---src-use-accordion-use-accordion-mdx-de54be81da28018a3b60.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/thegrinder/react-handy-hooks/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useAccordion } from '../';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AccordionHeader = makeShortcode(\"AccordionHeader\");\nconst AccordionSection = makeShortcode(\"AccordionSection\");\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useaccordion\"\n    }}>{`useAccordion`}</h1>\n    <p>{`useAccordion is a react hook that returns two prop getters, `}<inlineCode parentName=\"p\">{`getHeaderProps`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`getSectionProps`}</inlineCode>{`, and an `}<inlineCode parentName=\"p\">{`isActiveSection`}</inlineCode>{` function,\nwhich allow you to build the tabs component you want without forgetting about accessibility.`}</p>\n    <h3 {...{\n      \"id\": \"getheaderprops\"\n    }}><strong parentName=\"h3\">{`getHeaderProps`}</strong></h3>\n    <p>{`It's a function that takes in a unique id and index, and returns all the props that should be applied to each tab header.\nHere is the list of returned props:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`aria-controls`}</li>\n      <li parentName=\"ul\">{`aria-disabled`}</li>\n      <li parentName=\"ul\">{`aria-expanded`}</li>\n      <li parentName=\"ul\">{`id`}</li>\n      <li parentName=\"ul\">{`key`}</li>\n      <li parentName=\"ul\">{`onClick`}</li>\n      <li parentName=\"ul\">{`onFocus`}</li>\n      <li parentName=\"ul\">{`onKeyDown`}</li>\n      <li parentName=\"ul\">{`ref`}</li>\n    </ul>\n    <p>{`If you spread these props over a custom component, make sure to properly pass down ref (typically, using `}<inlineCode parentName=\"p\">{`React.forwardRef`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"getsectionprops\"\n    }}><strong parentName=\"h3\">{`getSectionProps`}</strong></h3>\n    <p>{`It's a function that takes in a unique id and index, and returns all the props that should be applied to each tab header.\nHere is the list of returned props:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`aria-hidden`}</li>\n      <li parentName=\"ul\">{`aria-labelledby`}</li>\n      <li parentName=\"ul\">{`id`}</li>\n      <li parentName=\"ul\">{`key`}</li>\n      <li parentName=\"ul\">{`role`}</li>\n      <li parentName=\"ul\">{`style`}</li>\n      <li parentName=\"ul\">{`ref`}</li>\n    </ul>\n    <p>{`If you spread these props over a custom component, make sure to properly pass down ref (typically, using `}<inlineCode parentName=\"p\">{`React.forwardRef`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"isactivesection\"\n    }}><strong parentName=\"h3\">{`isActiveSection`}</strong></h3>\n    <p>{`It's a simple function that takes in an index of the tab header/section and returns true or false depending whether it's an active one or not.`}</p>\n\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const AccordionHeader = React.forwardRef((props, ref) => (\\n    <button {...props} style={{ fontSize: \\'16px\\' }}>\\n      {props.isOpen ? \\'close\\' : \\'open\\'}\\n    </button>\\n  ))\\n  const AccordionSection = React.forwardRef((props, ref) => (\\n    <div {...props}>\\n      <div ref={ref}>{props.children}</div>\\n    </div>\\n  ))\\n  const Example = () => {\\n    const {\\n      getHeaderProps,\\n      getSectionProps,\\n      isActiveSection,\\n    } = useAccordion()\\n    const items = [\\n      {\\n        id: \\'one\\',\\n        section: \\'section one\\',\\n      },\\n      {\\n        id: \\'two\\',\\n        section: \\'section two\\',\\n      },\\n    ]\\n    return (\\n      <div aria-label=\\\"accordion example\\\">\\n        {items.map(({ id, section }, index) => (\\n          <div key={id}>\\n            <AccordionHeader\\n              isOpen={isActiveSection(index)}\\n              {...getHeaderProps(id, index)}\\n            />\\n            <AccordionSection {...getSectionProps(id, index)}>\\n              {section}\\n            </AccordionSection>\\n          </div>\\n        ))}\\n      </div>\\n    )\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useAccordion,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const AccordionHeader = React.forwardRef((props, ref) => <button {...props} style={{\n          fontSize: '16px'\n        }}>\n        {props.isOpen ? 'close' : 'open'}\n      </button>);\n        const AccordionSection = React.forwardRef((props, ref) => <div {...props}>\n        <div ref={ref}>{props.children}</div>\n      </div>);\n\n        const Example = () => {\n          const {\n            getHeaderProps,\n            getSectionProps,\n            isActiveSection\n          } = useAccordion();\n          const items = [{\n            id: 'one',\n            section: 'section one'\n          }, {\n            id: 'two',\n            section: 'section two'\n          }];\n          return <div aria-label=\"accordion example\">\n          {items.map(({\n              id,\n              section\n            }, index) => <div key={id}>\n              <AccordionHeader isOpen={isActiveSection(index)} {...getHeaderProps(id, index)} mdxType=\"AccordionHeader\" />\n              <AccordionSection {...getSectionProps(id, index)} mdxType=\"AccordionSection\">\n                {section}\n              </AccordionSection>\n            </div>)}\n        </div>;\n        };\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}